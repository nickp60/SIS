------------
|  AUTHORS  |
------------
- Zanoni Dias <zanoni@ic.unicamp.br>
- Ulisses Martins Dias <udias@ic.unicamp.br>
- Joao Carlos Setubal <setubal@iq.usp.br>

Last updated: March 7, 2012

This file explains how to run the program SIS in standalone mode.


-------------------
|  REQUIREMENTS  |
-------------------

SIS requires an installed python distribution, version 2.5 or
later. We have tested SIS on linux (ubuntu), windows 7, and mac OSX.

SIS also requires a coordinate file generated by scripts nucmer or
promer, which come with the MUMmer package. MUMmer can be obtained
here:

http://mummer.sourceforge.net/

-----------
|  USAGE  |
-----------

SIS requires MUMmer coord files as the only input. To run the program,
type this in a command line window:

python sys.py <coord file>

where <coord file> is a file containing coordinate data. This file
should be generated by nucmer or promer.

As a post-processing step after using nucmer or promer, we recommend
the use of the delta-filter program, which is also available in the
MUMmer package.

As a general example, let "reference.fna" and "contigs.fna" be one
genome and a set of contigs respectively. Both files have to be
in FASTA format. The following command can generate a coordinate
file:

<nucmer/promer> reference.fna contigs.fna -p example
delta-filter -1 example.delta > example.filter
show-coords example.filter > example.coords

Then you can use 'example.coords' to run SIS:

python sys.py example.coords

------------
|  OUTPUT  |
------------

SIS generates scaffolds by listing arbitrarily numbered scaffolds
followed the names of the contigs sorted by their position in the
scaffold order:

>scaffold_1
<contig_name_a> <orientation_a>
<contig_name_b> <orientation_b
<contig_name_c> <orientation_c>
     ...

>scaffold_2
<contig_name_d> <orientation_d>
<contig_name_e> <orientation_e
<contig_name_f> <orientation_f>
     ...

etc

The contig orientation is represented by the numbers 0 or 1, where 0
means the contig should be used in the scaffold in its original
orientation and 1 means the contig should be reverse complemented.

MULTIFASTA output

As part of the SIS package you will find program multifasta.py.

This programs accepts 2 inputs: the output of sis.py and the draft
genome for which the output was generated:

python multifasta.py <sis_file> <draft_genome_in_fasta_format>

This program generates a multifasta version of the scaffolds found by
sys.py.

Example of utilization:


<nucmer/promer> reference.fna contigs.fna -p example
delta-filter -1 example.delta > example.filter
show-coords example.filter > example.coords
python sys.py example.coords > example.sis
python multifasta.py example.sis contigs.fna

multifasta.py creates one multifasta file for each scaffold, using the
numbering determined by sis.py to name output files, with .fna extension.

-------------
|  EXAMPLE  |
-------------

Some examples can be found in the folder "examples": "nucmer.coords",
"promer.coords" and "NC_009525-NC_002945.coords". The first two files
are toy examples that are useful for understanding the coord files
generated by promer or nucmer.

The third file is the result of running SIS on real data. The reference
file comes from the organism "Mycobacterium bovis AF2122_97" and the
contig set comes from the "Mycobacterium tuberculosis H37Ra". Both
files can be acessed at NCBI:

reference: ftp://ftp.ncbi.nih.gov/genomes/Bacteria/Mycobacterium_bovis_AF2122_97_uid57695
contigs:   ftp://ftp.ncbi.nih.gov/genomes/Bacteria_DRAFT/Mycobacterium_tuberculosis_H37Ra_uid54595

In this example we used 'nucmer' and 'delta-filter' to find 219
conserved blocks and generate the coordinate file. SIS was able to
find 204 correct adjacencies from those 219 blocks.
